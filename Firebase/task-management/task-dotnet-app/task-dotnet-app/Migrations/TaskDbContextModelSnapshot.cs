//// <auto-generated />
//using Microsoft.EntityFrameworkCore;
//using Microsoft.EntityFrameworkCore.Infrastructure;
//using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
//using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
//using task_dotnet_app.Data;

//#nullable disable

//namespace task_dotnet_app.Migrations
//{
//    [DbContext(typeof(TaskDbContext))]
//    partial class TaskDbContextModelSnapshot : ModelSnapshot
//    {
//        protected override void BuildModel(ModelBuilder modelBuilder)
//        {
//#pragma warning disable 612, 618
//            modelBuilder
//                .UseCollation("English_United States.1252")
//                .HasAnnotation("ProductVersion", "9.0.3")
//                .HasAnnotation("Relational:MaxIdentifierLength", 63);

//            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

//            modelBuilder.Entity("task_dotnet_app.Data.Model.TaskItem", b =>
//                {
//                    b.Property<int>("taskId")
//                        .ValueGeneratedOnAdd()
//                        .HasColumnType("integer")
//                        .HasColumnName("taskId");

//                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("taskId"));

//                    b.Property<string>("category")
//                        .IsRequired()
//                        .HasMaxLength(255)
//                        .HasColumnType("character varying(255)")
//                        .HasColumnName("category");

//                    b.Property<string>("status")
//                        .IsRequired()
//                        .HasMaxLength(255)
//                        .HasColumnType("character varying(255)")
//                        .HasColumnName("status");

//                    b.Property<string>("taskName")
//                        .IsRequired()
//                        .HasMaxLength(255)
//                        .HasColumnType("character varying(255)")
//                        .HasColumnName("taskName");

//                    b.HasKey("taskId");

//                    b.ToTable("taskItems", (string)null);
//                });
//#pragma warning restore 612, 618
//        }
//    }
//}
